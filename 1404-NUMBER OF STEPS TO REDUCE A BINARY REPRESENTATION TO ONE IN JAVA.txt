** LEETCODE - NUMBER OF STEPS TO REDUCE A BINARY REPRESENTATION TO ONE IN JAVA**
class Solution {
       public int numSteps(String s) {
        int steps = 0;
        int carry = 0;

        // Start from the end of the string
        for (int i = s.length() - 1; i > 0; i--) {
            char currentBit = s.charAt(i);
            // If the current bit + carry is 1, it's odd, we need to add 1
            if (currentBit == '1' && carry == 0 || currentBit == '0' && carry == 1) {
                carry = 1;
                steps += 2;  // add 1, then divide by 2
            } else {
                // If the current bit + carry is 0, just divide by 2
                steps += 1;
            }
        }

        // If there's a final carry left (meaning the original number was odd and we added 1 at the start)
        if (carry == 1) {
            steps += 1;
        }

        return steps;
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        String s = "1101";
        System.out.println("Number of steps to reduce " + s + " to 1 is: " + solution.numSteps(s));  // Output: 6
    }
}

   

    